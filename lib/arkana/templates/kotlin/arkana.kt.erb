<% require 'arkana/helpers/string' %>
<% require 'arkana/helpers/kotlin_template_helper' %>
<% # TODO: Sort these import statements alphabetically %>
// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)
package <%= @kotlin_package_name %>


object <%= @namespace %> {
    private val salt = listOf(<%= @salt.formatted %>)

    private fun decode(encoded: List<Int>, cipher: List<Int>): String {
        val decoded = encoded.mapIndexed { index, item ->
            (item xor cipher[(index % cipher.size)]).toByte()
		}.toByteArray()
        
        return decoded.toString(Charsets.UTF_8)
    }

    private fun decodeInt(encoded: List<Int>, cipher: List<Int>): Int {
        return decode(encoded = encoded, cipher = cipher).toInt()
    }
    
    private fun decodeBoolean(encoded: List<Int>, cipher: List<Int>): Boolean {
        return decode(encoded = encoded, cipher = cipher).toBoolean()
    }

    object Global {
<% for secret in @global_secrets %>
        val <%= secret.key.camel_case %>: <%= KotlinTemplateHelper.kotlin_type(secret.type) %> 
            get() {
                val encoded = listOf(<%= secret.encoded_value %>)

                return <%= KotlinTemplateHelper.kotlin_decode_function(secret.type) %>(encoded = encoded, cipher = salt)
            }
<% end %>
    }

<% for environment in @environments %>
    object <%= environment %>: <%= @namespace %>Environment {
<% for secret in environment_protocol_secrets(environment) %>
        override val <%= secret.protocol_key.camel_case %>: <%= KotlinTemplateHelper.kotlin_type(secret.type) %> 
            get() {
                val encoded = listOf(<%= secret.encoded_value %>)

                return <%= KotlinTemplateHelper.kotlin_decode_function(secret.type) %>(encoded = encoded, cipher = salt)
            }
<% end %>
    }

<% end %>
}
