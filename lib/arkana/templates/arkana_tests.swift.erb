// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import <%= @import_name %>Interfaces
import XCTest
@testable import <%= @import_name %>


final class <%= @namespace %>Tests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: <%= @namespace %>GlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            <%= @salt.formatted %>

        ]
        globalSecrets = <%= @namespace %>.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
<% hex_key = SecureRandom.hex(64) %>
<% secret = generate_test_secret(key: hex_key) %>
        let encoded: [UInt8] = [
            <%= secret.encoded_value %>

        ]
        XCTAssertEqual(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "<%= hex_key %>")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
<% base64_key = SecureRandom.base64(64) %>
<% secret = generate_test_secret(key: base64_key) %>
        let encoded: [UInt8] = [
            <%= secret.encoded_value %>

        ]
        XCTAssertEqual(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "<%= base64_key %>")
    }

    func test_decodeUUIDKey_shouldDecode() {
<% uuid_key = SecureRandom.uuid %>
<% secret = generate_test_secret(key: uuid_key) %>
        let encoded: [UInt8] = [
            <%= secret.encoded_value %>

        ]
        XCTAssertEqual(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "<%= uuid_key %>")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
<% bool_key = "true" %>
<% secret = generate_test_secret(key: bool_key) %>
        let encoded: [UInt8] = [
            <%= secret.encoded_value %>

        ]
        XCTAssertTrue(<%= @namespace %>.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
<% bool_key = "false" %>
<% secret = generate_test_secret(key: bool_key) %>
        let encoded: [UInt8] = [
            <%= secret.encoded_value %>

        ]
        XCTAssertFalse(<%= @namespace %>.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
<% int_key = "42" %>
<% secret = generate_test_secret(key: int_key) %>
        let encoded: [UInt8] = [
            <%= secret.encoded_value %>

        ]
        XCTAssertEqual(<%= @namespace %>.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
<% dollar_sign_key = "real_$lim_shady" %>
<% secret = generate_test_secret(key: dollar_sign_key) %>
        let encoded: [UInt8] = [
            <%= secret.encoded_value %>

        ]
        XCTAssertEqual(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andEscaped_andNoQuotes_shouldDecode() {
        XCTAssertEqual(globalSecrets.secretWithDollarSignEscapedAndAndNoQuotesKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andEscaped_andDoubleQuotes_shouldDecode() {
        XCTAssertEqual(globalSecrets.secretWithDollarSignEscapedAndDoubleQuoteKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andSingleQuotes_shouldDecode() {
        XCTAssertEqual(globalSecrets.secretWithDollarSignNotEscapedAndSingleQuoteKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andDoubleQuotes_shouldDecodeWithUnexpectedValue() {
        XCTAssertNotEqual(globalSecrets.secretWithDollarSignNotEscapedAndDoubleQuotesKey, "real_$lim_shady")
    }

    func test_decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andNoQuotes_shouldDecodeWithUnexpectedValue() {
        XCTAssertNotEqual(globalSecrets.secretWithDollarSignNotEscapedAndNoQuotesKey, "real_$lim_shady")
    }
}
